//#include<stdio.h>
//struct NODE
//{
//	int val;//值
//	NODE* father;//父亲节点
//	NODE* LeftChild;//左孩子
//	NODE* RightChild;//右孩子
//};
//struct TREE
//{
//	int InitTREE(TREE& T);//构造空树
//	int DestoryTREE(TREE& T);//销毁树
//	int CreateTREE(TREE& T, int definition);//按照definition构造树
//	int ClearTREE(TREE& T);//清空树
//	int TREEEmpty(TREE T);//判断树是否存在
//	int TREEDepth(TREE T);//返回树的深度
//	NODE Root(TREE T);//返回根节点
//	int Value(TREE T, NODE cur_e);//返回cur_e的值
//	int Assign(TREE T, NODE cur_e, int value);//value赋值给cur_e
//	NODE Parent(TREE T, NODE cur_e);//返回cur_e的双亲
//	NODE LeftChild(TREE T, NODE cur_e);//返回cur_e的左孩子
//	NODE RightCHild(TREE T, NODE cur_e);//返回cur_e的右孩子
//	int InsertChild(TREE& T, NODE& p, int i, TREE& c);//插入非空树c为树中p所指节点的第i个子树
//	int DeleteChild(TREE& T, NODE& p, int i);//删除p所指向的第i棵子树
//	int TraverseTree(TREE& T, int Visit());//按照某种次序对T的每个节点调用Visit函数
//};
//
////构造空树
//int TREE::InitTREE(TREE& T)
//{
//	
//}
//
//int TREE::DestoryTREE(TREE& T)
//{
//
//}
//
//int TREE::CreateTREE(TREE& T, int definition)
//{
//
//}
//
//int TREE::ClearTREE(TREE& T)
//{
//
//}
//
//int TREE::TREEEmpty(TREE T)
//{
//
//}
//
//int TREE::TREEDepth(TREE T)
//{
//
//}
//
//NODE TREE::Root(TREE T)
//{
//
//}
//
//int TREE::Value(TREE T, NODE cur_e)
//{
//
//}
//
////value赋值给cur_e
//int TREE::Assign(TREE T, NODE cur_e, int value)
//{
//
//}
////返回cur_e的双亲
//NODE TREE:: Parent(TREE T, NODE cur_e)
//{
//
//}
//NODE LeftChild(TREE T, NODE cur_e);//返回cur_e的左孩子
//NODE RightCHild(TREE T, NODE cur_e);//返回cur_e的右孩子
//int InsertChild(TREE& T, NODE& p, int i, TREE& c);//插入非空树c为树中p所指节点的第i个子树
//int DeleteChild(TREE& T, NODE& p, int i);//删除p所指向的第i棵子树
//int TraverseTree(TREE& T, int Visit());//按照某种次序对T的每个节点调用Visit函数
//
//int main()
//{
//	return 0;
//}