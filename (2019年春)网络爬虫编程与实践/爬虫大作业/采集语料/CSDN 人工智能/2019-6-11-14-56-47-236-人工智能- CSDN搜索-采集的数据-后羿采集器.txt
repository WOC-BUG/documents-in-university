标题,标题链接,search-detail,limit_width1,https,作者,日期,https1,down,详情标题,日期时间,内容
人工智能,https://blog.csdn.net/qq_43167223/article/details/83626364,Python有点不一样，Python崇尚鸭子类型对于一个鸭子类型来说，我们并不关心这个对象的类型本身或是这个类继承，而是这个类是如何被使用的。我们可以通过下面的代码来调用这些类的方法。n面向对象三大特性**nn封装 根据 职责 将 属性 和 方法 封装 到一个抽象的 类 中nnn定义类的准则nnn继承 实现代码的重用，相同的代码不需要重复的编写nnn设计类的技巧n子类针对自己特有的需求，编写特定的...,https://blog.csdn.net/qq_43167223/article/details/83626364,,qq_43167223,2018-11-01,//blog.csdn.net/qq_43167223/article/details/83626364,158次阅读,人工智能 - qq_43167223的博客,2018年11月01日 20:25:17,原        人工智能
      
      
        
                                                  2018年11月01日 20:25:17
          芜杂栾雨，芜杂銮舆
          阅读数：159
                  
        
                  
      
    
  
  
    
            
                              
            
            
              
            
            Python有点不一样，Python崇尚鸭子类型对于一个鸭子类型来说，我们并不关心这个对象的类型本身或是这个类继承，而是这个类是如何被使用的。我们可以通过下面的代码来调用这些类的方法。
面向对象三大特性**

封装 根据 职责 将 属性 和 方法 封装 到一个抽象的 类 中


定义类的准则


继承 实现代码的重用，相同的代码不需要重复的编写


设计类的技巧
子类针对自己特有的需求，编写特定的代码


多态 不同的 子类对象 调用相同的 父类方法，产生不同的执行结果


多态 可以 增加代码的灵活度
以 继承 和 重写父类方法 为前提
是调用方法的技巧，不会影响到类的内部设计

多态案例演练


需求

在 Dog 类中封装方法 game


普通狗只是简单的玩耍


定义 XiaoTianDog 继承自 Dog，并且重写 game 方法


哮天犬需要在天上玩耍


定义 Person 类，并且封装一个 和狗玩 的方法


在方法内部，直接让 狗对象 调用 game 方法
Person 类中只需要让 狗对象 调用 game 方法，而不关心具体是 什么狗
game 方法是在 Dog 父类中定义的
在程序执行时，传入不同的 狗对象 实参，就会产生不同的执行效果


多态 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化

面向对象三大特性
1.
封装 根据 职责 将 属性 和 方法 封装 到一个抽象的 类 中
定义类的准则
2.
继承 实现代码的重用，相同的代码不需要重复的编写
设计类的技巧
子类针对自己特有的需求，编写特定的代码
3.
多态 不同的 子类对象 调用相同的 父类方法，产生不同的执行结果
多态 可以 增加代码的灵活度
以 继承 和 重写父类方法 为前提
是调用方法的技巧，不会影响到类的内部设计
需求
1.
在 Dog 类中封装方法 game
普通狗只是简单的玩耍
2.
定义 XiaoTianDog 继承自 Dog，并且重写 game 方法
哮天犬需要在天上玩耍
3.
定义 Person 类，并且封装一个 和狗玩 的方法
在方法内部，直接让 狗对象 调用 game 方法
Person 类中只需要让 狗对象 调用 game 方法，而不关心具体是 什么狗
game 方法是在 Dog 父类中定义的
在程序执行时，传入不同的 狗对象 实参，就会产生不同的执行效果
多态 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化！
类属性、实例属性
在了解了类基本的东西之后，下面看一下python中这几个概念的区别
先来谈一下类属性和实例属性
在前面的例子中我们接触到的就是实例属性（对象属性），顾名思义，类属性就是类对象所拥有的属性，它被所有类对象的实例对象所共有，在内存中只存在一个副本，这个和C++中类的静态成员变量有点类似。对于公有的类属性，在类外可以通过类对象和实例对象访问
总结如果需要在类外修改类属性，必须通过类对象去引用然后进行修改。如果通过实例对象去引用，会产生一个同名的实例属性，这种方式修改的是实例属性，不会影响到类属性，并且之后如果通过实例对象去引用该名称的属性，实例属性会强制屏蔽掉类属性，即引用的是实例属性，除非删除了该实例属性。
类的结构1.1 术语 —— 实例
1. 使用面相对象开发，第 1 步 是设计 类
2.使用 类名() 创建对象，创建对象 的动作有两步：

在内存中为对象 分配空间
调用初始化方法 init 为 对象初始化
3.对象创建后，内存 中就有了一个对象的 实实在在 的存在 —— 实例
因此，通常也会把：





创建出来的 对象 叫做 类 的 实例
2.
创建对象的 动作 叫做 实例化
3.
对象的属性 叫做 实例属性
4.
对象调用的方法 叫做 实例方法
在程序执行时：
1.
对象各自拥有自己的 实例属性
2.
调用对象方法，可以通过 self.
访问自己的属性
调用自己的方法
结论
每一个对象 都有自己 独立的内存空间，保存各自不同的属性
多个对象的方法，在内存中只有一份，在调用方法时，需要把对象的引用 传递到方法内部
1.2 类是一个特殊的对象
Python 中 一切皆对象：
class AAA: 定义的类属于 类对象
obj1 = AAA() 属于 实例对象
在程序运行时，类 同样 会被加载到内存
在 Python 中，类 是一个特殊的对象 —— 类对象
在程序运行时，类对象 在内存中 只有一份，使用 一个类 可以创建出 很多个对象实例
除了封装 实例 的 属性 和 方法外，类对象 还可以拥有自己的 属性 和 方法
1.类属性
2.类方法
通过 类名. 的方式可以 访问类的属性 或者 调用类的方法
__new__方法__new__方法__new__和__init__的作用
总结
* __new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供
*
__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类__new__出来的实例，或者直接是object的__new__出来的实例
*
__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值
*
我们可以将类比作制造商，__new__方法就是前期的原材料购买环节，__init__方法就是在有原材料的基础上，加工，初始化商品环节
1.单例是什么举个常见的单例模式例子，我们日常使用的电脑上都有一个回收站，在整个操作系统中，回收站只能有一个实例，整个系统都使用这个唯一的实例，而且回收站自行提供自己的实例。因此回收站是单例模式的应用。
确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，单例模式是一种对象创建型模式。2. 创建单例-保证只有1个对象
3.创建单例时，只执行1次__init__方法
单例设计模式
* 设计模式
设计模式 是 前人工作的总结和提炼，通常，被人们广泛流传的设计模式都是针对 某一特定问题 的成熟的解决方案
使用 设计模式 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性
单例设计模式
目的 —— 让 类 创建的对象，在系统中 只有 唯一的一个实例
每一次执行 类名() 返回的对象，内存地址是相同的
单例设计模式的应用场景
音乐播放 对象
回收站 对象
打印机 对象
……
02. new 方法
使用 类名() 创建对象时，Python 的解释器 首先 会 调用 new 方法为对象 分配空间
new 是一个 由 object 基类提供的 内置的静态方法，主要作用有两个：

在内存中为对象 分配空间
返回 对象的引用
Python 的解释器获得对象的 引用 后，将引用作为 第一个参数，传递给 init 方法
重写 new 方法 的代码非常固定！
重写 new 方法 一定要 return super().new(cls)
否则 Python 的解释器 得不到 分配了空间的 对象引用，就不会调用对象的初始化方法
注意：new 是一个静态方法，在调用时需要 主动传递 cls 参数
