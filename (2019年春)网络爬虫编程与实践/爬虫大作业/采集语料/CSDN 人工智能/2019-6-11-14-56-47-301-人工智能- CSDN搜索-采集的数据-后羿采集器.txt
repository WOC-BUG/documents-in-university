标题,标题链接,search-detail,limit_width1,https,作者,日期,https1,down,详情标题,日期时间,内容
人工智能,https://blog.csdn.net/dy416524/article/details/85176496,题目描述n人胖了就容易打瞌睡，打瞌睡又会导致长胖，这对小Ｘ的减重计划很不利，于是小Ｘ决定做点动脑子的事来抵御瞌睡虫的进袭，小Ｘ决定响应国务院的号召投身到人工智能的研究开发大潮中去，具体研究什么好呢？小Ｘ再三思考后决定开发国际象棋的人工智能软件，虽然国际象棋的软件已经能够战胜人类世界冠军了，但那是基于搜索的 AI(AI 是人工智能的简称)，小Ｘ想写一个基于机器学习的国际象棋 AI，目标是战胜 IBM...,https://blog.csdn.net/dy416524/article/details/85176496,,dy416524,2018-12-21,//blog.csdn.net/dy416524/article/details/85176496,166次阅读,人工智能 - dy416524的博客,2018年12月21日 22:20:32,原        人工智能
      
      
        
                                                  2018年12月21日 22:20:32
          skyleafemp
          阅读数：167
          
                                                      
        
                  
      
    
  
  
    
              
                      
              
            
          
          版权声明：叶小小          https://blog.csdn.net/dy416524/article/details/85176496        
            
                              
            
            
              
            
            题目描述
人胖了就容易打瞌睡，打瞌睡又会导致长胖，这对小Ｘ的减重计划很不利，于是小Ｘ决定做点动脑子的事来抵御瞌睡虫的进袭，小Ｘ决定响应国务院的号召投身到人工智能的研究开发大潮中去，具体研究什么好呢？小Ｘ再三思考后决定开发国际象棋的人工智能软件，虽然国际象棋的软件已经能够战胜人类世界冠军了，但那是基于搜索的 AI(AI 是人工智能的简称)，小Ｘ想写一个基于机器学习的国际象棋 AI，目标是战胜 IBM 的深蓝，小Ｘ的国际象棋水平也不差，曾获得过市青少年比赛的冠军，机器学习顾名思义就是让机器像人一样学习，小Ｘ首先训练机器学习棋子对棋盘的控制，具体做法是小Ｘ先在棋盘上放置若干个车和后，然后让机器判断有多少个格子没有被车和后控制到。
车和后的吃子规则如下：车：横、竖均可以走，步数不受限制，但不能斜着走。后：横、竖、斜都可以走，步数不受限制。无论是车还是后都不能越过棋子去吃子，用作训练的国际象棋棋盘可以放大缩小，并不限于 8×8 的棋盘，车和后所在的位置当然是被控制的，它们能走到的位置也都被控制。
输入
第一行包含一个正整数 n，表示棋盘的大小
接下来 n 行，每行 n 个整数，其中 0 表示棋盘上这个格子为空的，1 表示为车，2 表示为后
输出
一行一个整数，表示没有被控制到的格子数量
样例输入
复制样例数据
5
0 0 0 0 0
0 1 0 1 0
0 0 2 0 0
0 1 0 1 0
0 0 0 0 0
样例输出
4

提示
红色格子为样例中被控制到的格子，中间那个后能够斜着走到四个角落的格子(图中白色的格子)，但因受到四个车的阻隔而不能控制到那四个格子！
数据范围
20%的数据，保证棋盘上只有车
50%的数据，n<=50
80%的数据，n<=200
100%的数据，n<=1000，车的数量<=n*n，后的数量<=n
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n,i,j,k,m;
    scanf("%d",&n);
    int a[n][n];
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(a[i][j]==1)
            {
                for(k=1;i-k>=0;k++)
                {
                    if(a[i-k][j]==0||a[i-k][j]==3)
                    a[i-k][j]=3;
                    else break;
                }
                for(k=1;i+k<=n-1;k++)
                {
                    if(a[i+k][j]==0||a[i+k][j]==3)
                    a[i+k][j]=3;
                    else break;
                }
                for(k=1;j-k>=0;k++)
                {
                    if(a[i][j-k]==0||a[i][j-k]==3)
                    a[i][j-k]=3;
                    else break;
                }
                for(k=1;j+k<=n-1;k++)
                {
                    if(a[i][j+k]==0||a[i][j+k]==3)
                    a[i][j+k]=3;
                    else break;
                }
            }
            if(a[i][j]==2)
            {
                for(k=1;i-k>=0;k++)
                {
                    if(a[i-k][j]==0||a[i-k][j]==3)
                    a[i-k][j]=3;
                    else break;
                }
                for(k=1;i+k<=n-1;k++)
                {
                    if(a[i+k][j]==0||a[i+k][j]==3)
                    a[i+k][j]=3;
                    else break;
                }
                for(k=1;j-k>=0;k++)
                {
                    if(a[i][j-k]==0||a[i][j-k]==3)
                    a[i][j-k]=3;
                    else break;
                }
                for(k=1;j+k<=n-1;k++)
                {
                    if(a[i][j+k]==0||a[i][j+k]==3)
                    a[i][j+k]=3;
                    else break;
                }
                for(m=1;i-m>=0&&j-m>=0;m++)
                {
                    if(a[i-m][j-m]==0||a[i-m][j-m]==3)
                    a[i-m][j-m]=3;
                    else break;
                }
                for(m=1;i+m<=n-1&&j+m<=n-1;m++)
                {
                    if(a[i+m][j+m]==0||a[i+m][j+m]==3)
                    a[i+m][j+m]=3;
                    else break;
                }
                for(m=1;i-m>=0&&j+m<=n-1;m++)
                {
                    if(a[i-m][j+m]==0||a[i-m][j+m]==3)
                    a[i-m][j+m]=3;
                    else break;
                }
                for(m=1;i+m<=n-1&&j-m>=0;m++)
                {
                    if(a[i+m][j-m]==0||a[i+m][j-m]==3)
                    a[i+m][j-m]=3;
                    else break;
                }
            }
        }
    }
    int cnt=0;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(a[i][j]==0)
                cnt++;
        }

    }
    printf("%d\n",cnt);
    return 0;
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113
100多行可还行。
